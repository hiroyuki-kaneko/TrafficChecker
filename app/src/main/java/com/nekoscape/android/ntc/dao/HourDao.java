package com.nekoscape.android.ntc.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table HourTable.
 */
public class HourDao extends AbstractDao<Hour, Long> {

    public static final String TABLENAME = "HourTable";

    /**
     * Properties of entity Hour.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Timestamp = new Property(1, String.class, "timestamp", false, "timestamp");
        public final static Property Years = new Property(2, String.class, "years", false, "years");
        public final static Property Months = new Property(3, String.class, "months", false, "months");
        public final static Property Days = new Property(4, String.class, "days", false, "days");
        public final static Property Hours = new Property(5, String.class, "hours", false, "hours");
        public final static Property Minutes = new Property(6, String.class, "minutes", false, "minutes");
        public final static Property Seconds = new Property(7, String.class, "seconds", false, "seconds");
        public final static Property Msend = new Property(8, Long.class, "msend", false, "msend");
        public final static Property Mrecv = new Property(9, Long.class, "mrecv", false, "mrecv");
        public final static Property Osend = new Property(10, Long.class, "osend", false, "osend");
        public final static Property Orecv = new Property(11, Long.class, "orecv", false, "orecv");
    }

    ;


    public HourDao(DaoConfig config) {
        super(config);
    }

    public HourDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'HourTable' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'timestamp' text default (strftime('%s','now','localtime'))," + // 1: timestamp
                "'years' TEXT," + // 2: years
                "'months' TEXT," + // 3: months
                "'days' TEXT," + // 4: days
                "'hours' TEXT," + // 5: hours
                "'minutes' TEXT," + // 6: minutes
                "'seconds' TEXT," + // 7: seconds
                "'msend' long," + // 8: msend
                "'mrecv' long," + // 9: mrecv
                "'osend' long," + // 10: osend
                "'orecv' long);"); // 11: orecv
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_HourTable_years ON HourTable" +
                " (years);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_HourTable_months ON HourTable" +
                " (months);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_HourTable_days ON HourTable" +
                " (days);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HourTable'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Hour entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(2, timestamp);
        }

        String years = entity.getYears();
        if (years != null) {
            stmt.bindString(3, years);
        }

        String months = entity.getMonths();
        if (months != null) {
            stmt.bindString(4, months);
        }

        String days = entity.getDays();
        if (days != null) {
            stmt.bindString(5, days);
        }

        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(6, hours);
        }

        String minutes = entity.getMinutes();
        if (minutes != null) {
            stmt.bindString(7, minutes);
        }

        String seconds = entity.getSeconds();
        if (seconds != null) {
            stmt.bindString(8, seconds);
        }

        Long msend = entity.getMsend();
        if (msend != null) {
            stmt.bindLong(9, msend);
        }

        Long mrecv = entity.getMrecv();
        if (mrecv != null) {
            stmt.bindLong(10, mrecv);
        }

        Long osend = entity.getOsend();
        if (osend != null) {
            stmt.bindLong(11, osend);
        }

        Long orecv = entity.getOrecv();
        if (orecv != null) {
            stmt.bindLong(12, orecv);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Hour readEntity(Cursor cursor, int offset) {
        Hour entity = new Hour( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timestamp
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // years
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // months
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // days
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hours
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // minutes
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // seconds
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // msend
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // mrecv
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // osend
                cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // orecv
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Hour entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYears(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMonths(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDays(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHours(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinutes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSeconds(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMsend(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setMrecv(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOsend(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setOrecv(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Hour entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Hour entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
