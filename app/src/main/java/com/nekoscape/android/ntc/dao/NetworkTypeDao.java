package com.nekoscape.android.ntc.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NetworkTypeTable.
 */
public class NetworkTypeDao extends AbstractDao<NetworkType, Long> {

    public static final String TABLENAME = "NetworkTypeTable";

    /**
     * Properties of entity NetworkType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "type");
        public final static Property Subtype = new Property(2, Integer.class, "subtype", false, "subtype");
        public final static Property Ssid = new Property(3, String.class, "ssid", false, "ssid");
    }

    ;


    public NetworkTypeDao(DaoConfig config) {
        super(config);
    }

    public NetworkTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'NetworkTypeTable' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'type' INTEGER," + // 1: type
                "'subtype' INTEGER," + // 2: subtype
                "'ssid' TEXT);"); // 3: ssid
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_NetworkTypeTable_type_subtype_ssid ON NetworkTypeTable" +
                " (type,subtype,ssid);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NetworkTypeTable'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, NetworkType entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }

        Integer subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindLong(3, subtype);
        }

        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(4, ssid);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public NetworkType readEntity(Cursor cursor, int offset) {
        NetworkType entity = new NetworkType( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // subtype
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ssid
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, NetworkType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSubtype(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSsid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(NetworkType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(NetworkType entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
